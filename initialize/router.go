package initialize

import (
	"achilles/api"
	_ "achilles/docs"
	"achilles/global"
	"achilles/middleware"
	"net/http"

	"github.com/gin-gonic/gin"
	ginSwagger "github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
)

// 初始化总路由

func Routers() *gin.Engine {
	Router := gin.Default()
	Router.StaticFS(global.GVA_CONFIG.Local.Path, http.Dir(global.GVA_CONFIG.Local.Path)) // 为用户头像和文件提供静态地址
	global.GVA_LOG.Info("use middleware logger")
	Router.Use(middleware.Cors()) // cors allow all
	// Router.Use(middleware.CorsByRules()) // cors allow by rules
	global.GVA_LOG.Info("use middleware cors")
	Router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	global.GVA_LOG.Info("register swagger handler")
	systemRouter := api.RouterGroupApp.System
	exampleRouter := api.RouterGroupApp.Example
	autocodeRouter := api.RouterGroupApp.Autocode
	PublicGroup := Router.Group("")
	{
		// 健康监测
		PublicGroup.GET("/health", func(c *gin.Context) {
			c.JSON(200, "ok")
		})
	}
	{
		systemRouter.InitBaseRouter(PublicGroup) // 注册基础功能路由 不做鉴权
		systemRouter.InitInitRouter(PublicGroup) // 自动初始化相关
	}
	privateGroup := Router.Group("/api/admin")
	privateGroup.Use(middleware.JWTAuth()).Use(middleware.CasbinHandler())
	{
		systemRouter.InitApiRouter(privateGroup)                 // 注册功能 api 路由
		systemRouter.InitJwtRouter(privateGroup)                 // jwt 相关路由
		systemRouter.InitUserRouter(privateGroup)                // 注册用户路由
		systemRouter.InitMenuRouter(privateGroup)                // 注册 menu 路由
		systemRouter.InitSystemRouter(privateGroup)              // system 相关路由
		systemRouter.InitCasbinRouter(privateGroup)              // 权限相关路由
		systemRouter.InitAutoCodeRouter(privateGroup)            // 创建自动化代码
		systemRouter.InitAuthorityRouter(privateGroup)           // 注册角色路由
		systemRouter.InitSysDictionaryRouter(privateGroup)       // 字典管理
		systemRouter.InitAutoCodeHistoryRouter(privateGroup)     // 自动化代码历史
		systemRouter.InitSysOperationRecordRouter(privateGroup)  // 操作记录
		systemRouter.InitSysDictionaryDetailRouter(privateGroup) // 字典详情管理
	}
	{
		exampleRouter.InitExcelRouter(privateGroup)                 // 表格导入导出
		exampleRouter.InitCustomerRouter(privateGroup)              // 客户路由
		exampleRouter.InitFileUploadAndDownloadRouter(privateGroup) // 文件上传下载功能路由

		// Code generated by achilles Begin; DO NOT EDIT.
		autocodeRouter.InitSysAutoCodeExampleRouter(privateGroup)
		// Code generated by achilles End; DO NOT EDIT.
	}

	InstallPlugin(PublicGroup, privateGroup) // 安装插件

	global.GVA_LOG.Info("router register success")
	return Router
}
